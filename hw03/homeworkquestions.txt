Randall D. Johnson
CSCI 3731 A 
9/10/2018

Homework #3

1. 

if (i = 0) means that the program is declaring the integer i to the value 0. 
This means that the loop will go on forever, because the program will keep on declaring i to 0. 
To fix this change if (i=0) to if (i==0). 
This compares the value in the variable i to the integer 0. 
This does not declare i to 0. 

int min;
for (int i = 0; i < 10; ++i) {
    int value = 0;
    scanf("%d", &value);
    if (i == 0) min = value;
    else if (value < min) min = value;
}

2. 

When you are using two integer variables as arguments, the data is pushed into the memory stack for the function. 
It is legal to return one of the pointers of the two integers, but when the function ends, 
all local data that was part of the function will be popped off the stack. 
Now the return pointer does not point to anything. 
This is a known bug known as "pointer to local data." 

To fix this bug, use pointers as arguments. 
Pointers will give a reference of where in the data it is pointing to. 
The data itself is not part of the function and is not pushed into the stack. 
So when you return the pointer, the data will still exist.

int* pointerToMax(int* a, int* b) {
    if (*a > *b) return a;
    else return b;
}

3. 

Since the pointer (ptr) is pointing to nothing, 
the scanner does not know where to store the input value. 
A solution would be:

int value = 0;
scanf("%d", &value);
printf("You entered %d", value);

4. 

a. int* a 
- declaring pointer a is pointing to an integer.
b. const int b 
- declaring pointer  a constant integer.
c. const int* c 
- declaring pointer  c pointing to a constant integer.
d. int* const d 
- declaring a constant pointer d pointing to an integer.
e. const int* const e
 - declaring a constant pointer e pointing to a constant integer.

5. 

& returns the pointer to the data; * dereferences the pointer.
examples:
&a returns the pointer (memory address) to the data in variable a.
*a returns the data that pointer a references.

6. 

const int* a
This declares a pointer (a) that points to a constant integer data.
The point can be modified, but the integer that the point points to cannot.

int* const b
This declares a constant pointer (b) that points to an integer.
The data that the pointer points to can be modified, but the pointer itself cannot.
